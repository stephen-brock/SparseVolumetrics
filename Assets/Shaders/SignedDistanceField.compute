// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture3D<float> _Input;
RWTexture3D<float> _Result;

float _Decay;

SamplerState PointRepeatSampler;

[numthreads(4,4,4)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float width, height, depth;
    _Input.GetDimensions(width, height, depth);
    float3 uvw = float3(id) / float3(width, height, depth);
    float decay = 1.0f / max(width, max(height, depth));
    float maxValue = _Input.SampleLevel(PointRepeatSampler, uvw, 0);
    for (float i = -1; i <= 1; i++)
    {
        for (float j = -1; j <= 1; j++)
        {
            for (float k = -1; k <= 1; k++)
            {
                maxValue = max(maxValue, _Input.SampleLevel(PointRepeatSampler, float3(id + float3(i,j,k)) / float3(width, height, depth), 0));
            }
        }
    }

    _Result[id] = maxValue * _Decay;
}

#pragma kernel ApplyThreshold

float SampleDensity(float3 uvw)
{
    return max(0, 2.0f * _Input.SampleLevel(PointRepeatSampler, uvw, 0) - 1.25f);
}

[numthreads(4,4,4)]
void ApplyThreshold (uint3 id : SV_DispatchThreadID)
{
    float width, height, depth;
    _Input.GetDimensions(width, height, depth);
    float3 uvw = float3(id) / float3(width, height, depth);
    _Result[id] = SampleDensity(uvw) > 0.01f ? 1.0f : _Result[id];
}

#pragma kernel Combine

Texture3D<float> _SDF;
RWTexture3D<float2> _Combined;

[numthreads(4,4,4)]
void Combine (uint3 id : SV_DispatchThreadID)
{
    float width, height, depth;
    _Input.GetDimensions(width, height, depth);
    float3 uvw = float3(id) / float3(width, height, depth);
    _Combined[id] = float2(_Input.SampleLevel(PointRepeatSampler, uvw, 0), _SDF.SampleLevel(PointRepeatSampler, uvw, 0));
}
